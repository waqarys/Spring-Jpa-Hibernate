<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlsns:tx="http://www.springframework.org/schema/tx"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd">
		
	<!-- 
	Spring allows you to do two things:

	Autowiring of beans
	Autodiscovery of beans
	1. Autowiring
	Usually in applicationContext.xml you define beans and other beans are wired using constructor or setter methods. 
	You can wire beans using XML or annotations. 
	In case you use annotations, you need to activate annotations and you have to add <context:annotation-config /> 
	in applicationContext.xml. 
	This will simplify the structure of the tag from applicationContext.xml, 
	because you will not have to manually wire beans (constructor or setter). 
	You can use @Autowire annotation and the beans will be wired by type.
	
	A step forward for escaping the manual XML configuration is
	
	2. Autodiscovery
	Autodiscovery is simplifying the XML one step further, in the sense that you don't even need too add the <bean> 
	tag in applicationContext.xml. 
	You just mark the specific beans with one of the following annotation and Spring will 
	automatically wire the marked beans and their dependencies into the Spring container. 
	The annotations are as follow: @Controller, @Service, @Component, @Repository. 
	By using <context:component-scan> and pointing the base package, 
	Spring will auto-discover and wire the components into Spring container.
	
	As a conclusion:
	
	<context:annotation-config /> is used in order to be able to use @Autowired annotation
	<context:component-scan /> is used to determine the search of specific beans and attempt of autowiring.	 -->
		
	<!-- Configure the application using annotation
		USed to activate annotations in beans already registered in the application context -->	
	<context:annotation-config />
	
	<!-- 
	org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor is automatically loaded into App Context by Spring when using annotation based configuration. One of its duties is to search the proper entity EntityManagerFactory that would provide the EntityManager for you @PersistenceContext annotated properties.

	If you have multiple EntityManagerFactory beans in you spring config/context and you have @PersistenceContext annotations without a unitName attribute (lets say you are using a framework that comes with such a bean, and you can't touch framework code), you may run into this exception: org.springframework.beans.factory.NoUniqueBeanDefinitionException.
	
	I found this workaround in case you tun into this:
	
	<bean id="org.springframework.context.annotation.internalPersistenceAnnotationProcessor"
	class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" >
	<property name="defaultPersistenceUnitName" value="entityManagerFactory"/>
	</bean> 
	This would override the default PersistenceAnnotationBeanPostProcessor loaded by Spring with a new one with defaultPersistenceUnitName.
	 -->
	<bean class="org.springframework.orm.jpa.support.PersistenceAnnotationBeanPostProcessor" />
	
	<bean id="entityManagerFactory" class="org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean">
		<property name="persistenceUniName" value="punit"/>
		<property name="dataSource" ref="dataSource"/>
		<property name="jpaVendorAdapter">
			<bean class="org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter">
				<property name="showSql" value="true" />
			</bean>
		</property>
		<property name="jpaPropertyMap">
			<map>
				<entry key="hibernate.dialect" value="org.hibernate.dialect.MySQL5InnoDBDialect"/>
				<entry key="hibernate.hbm2ddl.auto" value="none" />
				<entry key="hibernate.format_sql" value="true" />
			</map>
		</property>
	</bean>
	
	<!-- Makes transaction manager available -->
	<bean id="transactionManager" class="org.springframework.orm.jpa.JpaTransactionManager">
		<property name="entityManagerFactory" ref="entityManagerFactory"></property>
	</bean>
	
	<!-- Configure transaction -->
	<tx:annotation-driven transaction-manager="transactionManager" />
	
</beans>